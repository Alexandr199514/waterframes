import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
    id 'java'
    id 'idea'
    id 'fabric-loom' version '1.6-SNAPSHOT'
    id 'com.modrinth.minotaur' version '2.+'
    id 'net.darkhax.curseforgegradle' version '1.1.+'
}

base {
    archivesName = modid
    version = mcversion + "-" +  modversion
}

java.toolchain {
    languageVersion = JavaLanguageVersion.of(17)
}

println "Gradle Java: ${JavaVersion.current()}"
println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
loom {
    mixin {
        defaultRefmapName = "${modid}.${mixin_refmap_suffix}"
    }

    accessWidenerPath = file("src/main/resources/${modid}.accesswidener")

    mods {
        "${modid}" {
            sourceSet sourceSets.main
        }
    }

}
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()
    maven { url "https://repo.spongepowered.org/maven" }
    maven { url "https://maven.tterrag.com/" }
    maven {
        url 'https://www.cursemaven.com'
        content {
            includeGroup "curse.maven"
        }
    }
    maven { url 'https://jitpack.io' }
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:$mcversion"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-$mcversion:$mappings_version@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${flversion}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabricversion}"

    //DEPENDENCIES
    modImplementation "com.github.SrRapero720.watermedia:build:$watermediaversion"
    modImplementation "curse.maven:video-player-645407:$videoplayerversion"
    modImplementation "curse.maven:creativecore-257814:$creativecoreversion"
//    modImplementation "curse.maven:forge-config-api-port-fabric-547434:4583000"

    // UTIL
    modImplementation "curse.maven:ferritecore-fabric-459857:$ferritecoreversion"
//    modImplementation "curse.maven:fastload-630620:$fastloadversion"
//    implementation "curse.maven:lazy-dfu-forge-460819:$lazyversion"
    modImplementation "curse.maven:spark-361579:$sparkversion"
//    modImplementation "curse.maven:sodium-394468:5092241"
//    implementation "curse.maven:worldedit-225608:$weversion"
//    modImplementation "curse.maven:iris-455508:${oculusversion}"
//    modImplementation "curse.maven:jei-238222:$jeiversion"

    // MOD SUPPORT
//    implementation "com.simibubi.create:create-$mcversion:$createversion:slim") { transitive = false }
//    implementation "com.jozufozu.flywheel:flywheel-forge-$mcversion:$flywheelversion")
//    implementation "com.tterrag.registrate:Registrate:$registrateversion")
}

tasks.processResources.outputs.upToDateWhen { false }
processResources {
    filesMatching(['fabric.mod.json', 'pack.mcmeta', 'resourcepacks/**/pack.mcmeta', "$modid.$mixin_file_suffix".toString()]) {
        expand project.properties
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = 'UTF-8'
}

jar {
    manifest {
        attributes([
            "Specification-Title": modname,
            "Specification-Vendor": modauthor,
            "Specification-Version": modversion,
            "Implementation-Title": modname,
            "Implementation-Version"  : modversion,
            "Implementation-Vendor": modauthor,
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs": "$modid.$mixin_file_suffix"
        ])
    }
    finalizedBy(remapJar)
}

task upload(type: GradleBuild) {
    description 'Uploads new version to modrinth and curseforge.'
    group = 'publishing'
    tasks = [ 'curseforge', 'modrinth']
    dependsOn(remapJar)
}

tasks.modrinth.enabled = System.getenv("MODRINTH_TOKEN") != null
tasks.modrinth.group = 'publishing'
modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    versionName = modnamebig + "/" + "FABRIC" + "/" + mcversion + "/" + modversion
    projectId = modrinthid
    versionNumber = mcversion + "-" + "fabric" + "-" + modversion
    versionType = versiontype
    uploadFile = remapJar
    gameVersions = [ mcversion ]
    changelog = getChangelogText(true)
    loaders = [ "fabric" ]
    dependencies {
        required.project "creativecore"
        required.project "watermedia"
        required.project "fabric-api"
        incompatible.project "stellarity"
    }
}

task curseforge(type: TaskPublishCurseForge) {
    disableVersionDetection()

    apiToken = System.getenv("CURSEFORGE_TOKEN") != null ? System.getenv("CURSEFORGE_TOKEN") : "empty"

    def mainFile = upload(curseforgeid, remapJar)
    mainFile.displayName = modnamebig + "/" + "FABRIC" + "/" + mcversion + "/" + modversion
    mainFile.changelog = getChangelogText(false)
    mainFile.changelogType = "markdown"
    mainFile.addModLoader("Fabric")
    mainFile.addGameVersion(mcversion, "server", "client")
    mainFile.addRequirement("creativecore", "watermedia")
    mainFile.addIncompatibility("fancyvideo-api", "stellarity")
    mainFile.releaseType = versiontype
}

String getChangelogText(boolean latest) {
    String result = ''
    List<String> lines = file('CHANGELOG.md').readLines('UTF-8')

    for (String line: lines) {
        if (latest && line.isEmpty()) {
            return result
        }

        result += line + "\n"
    }
    return result
}
