plugins {
    id 'java'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

version = modversion
group = modgroup
base {
    archivesName = modid
}

//apply plugin: 'net.minecraftforge.gradle'
//apply plugin: 'org.spongepowered.mixin'

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

println "Gradle Java: ${JavaVersion.current()}"
println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: "${mappingsch}", version: "${mappings_version}-${mcversion}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    copyIdeResources = true
    runs {
        client {
            taskName "WFClient_${mcversion}"
            workingDirectory project.file('run')
			
			property 'forge.logging.console.level', 'debug'
			arg '--mixin.config'
			arg 'waterframes.mixin.json'

            mods {
                "${modid}" {
                    source sourceSets.main
                }
            }
        }

        server {
            taskName "WFServer_${mcversion}"
            workingDirectory project.file('run')

            property 'forge.logging.console.level', 'debug'
            arg '--mixin.config'
            arg 'waterframes.mixin.json'

            mods {
                "${modid}" {
                    source sourceSets.main
                }
            }
        }
    }
}


minecraft.runs.all {
    // Tell forge to include your libraries in the classpath
    lazyToken('minecraft_classpath') {
        configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    jcenter()
    mavenCentral()
    maven { url "https://maven.tterrag.com/" }
    maven {
        url 'https://www.cursemaven.com'
        content {
            includeGroup "curse.maven"
        }
    }
    maven { url 'https://jitpack.io' }
}

configurations {
    library
    implementation.extendsFrom library
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.mcversion}-${project.fgversion}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    //DEPENDENCIES
    implementation fg.deobf("curse.maven:watermedia-869524:${watermediaversion}")
    implementation fg.deobf("curse.maven:creativecore-257814:${creativecoreversion}")

    // UTIL
    implementation fg.deobf("curse.maven:ferritecore-429235:${ferritecoreversion}")
    implementation fg.deobf("curse.maven:fastload-630620:${fastloadversion}")
    implementation fg.deobf("curse.maven:lazy-dfu-forge-460819:${lazyversion}")
    implementation fg.deobf("curse.maven:spark-361579:${sparkversion}")
    implementation fg.deobf("curse.maven:rubidium-574856:${rubidiumversion}")
//    implementation fg.deobf("curse.maven:oculus-581495:${oculusversion}")


    // MOD SUPPORT
    implementation fg.deobf("com.simibubi.create:create-${mcversion}:${createversion}:slim") { transitive = false }
    implementation fg.deobf("com.jozufozu.flywheel:flywheel-forge-${mcversion}:${flywheelversion}")
    implementation fg.deobf("com.tterrag.registrate:Registrate:${registrateversion}")

}

def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
def replaceProperties = [
        minecraft_version: mcversion, minecraft_version_range: mcrange,
        forge_version: fgversion, forge_version_range: fgrange,
        loader_version_range: fgrange,
        mod_id: modid, mod_name: modname, mod_license: modlicense, mod_version: modversion,
        mod_authors: modauthor, mod_description: mod_description,
        watermedia_version_range: watermediarange, creativecore_version_range: creativecorerange
]
processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}


mixin { add sourceSets.main, "waterframes.mixin-refmap.json" }

jar.archiveFileName = "${modid}-${mcversion}-${modversion}.jar"
jar {
    manifest {
        attributes([
            "Specification-Title": project.modname,
            "Specification-Vendor": project.modauthor,
            "Specification-Version": project.modversion,
            "Implementation-Title": project.modname,
            "Implementation-Version"  : project.modversion,
            "Implementation-Vendor": project.modauthor,
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
            "TweakOrder": 0,
            "MixinConfigs": "waterframes.mixin.json"
        ])
    }
    from {
        configurations.library.collect {
            it.isDirectory() ? it.matching {
                exclude '*', 'META-INF/**'
            } : zipTree(it).matching {
                exclude '*', 'META-INF/**'
            }
        }
    }
}

jar.finalizedBy('reobfJar')
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = 'UTF-8'
}