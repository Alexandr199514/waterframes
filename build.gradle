plugins {
    id 'java'
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

version = mcversion + "-" +  modversion

java {
    archivesBaseName = modid
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

println "Gradle Java: ${JavaVersion.current()}"
println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: mappingsch, version: "${mappings_version}-${mcversion}"
    accessTransformer file('src/main/resources/META-INF/accesstransformer.cfg')
    copyIdeResources = true

    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            property 'log4j.appender.Console', "org.apache.log4j.ConsoleAppender"
            property 'terminal.jline', 'true'
            arg '--mixin.config'
            arg "${modid}.${mixin_file_suffix}"

            mods {
                "${modid}" {
                    source sourceSets.main
                }
            }
        }

        client {
            arg '--username=dev2'
        }
        server {}
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

mixin {
    add sourceSets.main, "${modid}.${mixin_refmap_suffix}"
    config "${modid}.${mixin_file_suffix}"
}

repositories {
    mavenCentral()
    maven { url "https://repo.spongepowered.org/maven" }
    maven { url "https://maven.tterrag.com/" }
    maven {
        url 'https://www.cursemaven.com'
        content {
            includeGroup "curse.maven"
        }
    }
    maven { url 'https://jitpack.io' }
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.mcversion}-${project.fgversion}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    //DEPENDENCIES
    implementation fileTree('libs') { include '*.jar' }
//    implementation "com.github.SrRapero720.watermedia:build:${watermediaversion}"
    implementation fg.deobf("curse.maven:video-player-645407:4782050")
//    implementation fg.deobf("curse.maven:creativecore-257814:${creativecoreversion}")

    // UTIL
    implementation fg.deobf("curse.maven:ferritecore-429235:${ferritecoreversion}")
    implementation fg.deobf("curse.maven:fastload-630620:${fastloadversion}")
    implementation fg.deobf("curse.maven:lazy-dfu-forge-460819:${lazyversion}")
    implementation fg.deobf("curse.maven:spark-361579:${sparkversion}")
    implementation fg.deobf("curse.maven:embeddium-908741:${embeddiumversion}")
    implementation fg.deobf("curse.maven:worldedit-225608:3697298")
//    implementation fg.deobf("curse.maven:oculus-581495:${oculusversion}")
    implementation fg.deobf("curse.maven:jei-238222:5068328")

    // MOD SUPPORT
    implementation fg.deobf("com.simibubi.create:create-${mcversion}:${createversion}:slim") { transitive = false }
    implementation fg.deobf("com.jozufozu.flywheel:flywheel-forge-${mcversion}:${flywheelversion}")
    implementation fg.deobf("com.tterrag.registrate:Registrate:${registrateversion}")
}

processResources {
    filesMatching(['META-INF/mods.toml', 'pack.mcmeta', "${modid}.${mixin_file_suffix}".toString()]) {
        expand project.properties
    }
}

jar {
    manifest {
        attributes([
            "Specification-Title": modname,
            "Specification-Vendor": modauthor,
            "Specification-Version": modversion,
            "Implementation-Title": modname,
            "Implementation-Version"  : modversion,
            "Implementation-Vendor": modauthor,
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs": "${modid}.${mixin_file_suffix}"
        ])
    }
}

jar.finalizedBy('reobfJar')
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = 'UTF-8'
}
tasks.processResources.outputs.upToDateWhen { false }